name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/09.04-ssm

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop

jobs:
  create_cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            yarn.lock
            .yarn
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

  build_image:
    runs-on: ubuntu-latest
    needs: create_cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Remove conflicting containerd packages
        run: |
          sudo apt-get remove -y containerd containerd.io || true
          sudo apt-get purge -y containerd containerd.io || true
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends docker.io

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl jq
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Verify IAM Role Access
        run: |
          aws sts get-caller-identity

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ env.IMAGE_NAME }}

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

      - name: Clean up Docker
        run: |
          docker system prune -af --volumes
          sudo apt-get clean

  deploy_image:
    runs-on: ubuntu-latest
    needs: build_image
    container:
      image: amazon/aws-cli:latest
    steps:
      - name: Install tar and gzip utilities
        run: |
          yum update -y
          yum install -y tar gzip

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy image using AWS SSM
        run: |
          LOG_IN_CMD="aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ env.IMAGE_NAME }}"
          COMMANDS_TO_EXECUTE="docker pull $IMAGE_NAME:latest && (docker stop juice-shop || true) && (docker rm juice-shop || true) && docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest"
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "i-0e8a8b5490aa5a8de" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=['${LOG_IN_CMD}', '${COMMANDS_TO_EXECUTE}']" \
            --query "Command.CommandId" \
            --output text)
          
          echo "Command ID: $COMMAND_ID"
          
          # Wait for the command to complete
          aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "i-0e8a8b5490aa5a8de" || true
          
          # Retrieve and print the detailed output of the command
          aws ssm get-command-invocation --command-id "$COMMAND_ID" --instance-id "i-0e8a8b5490aa5a8de" --query '{CommandId:CommandId, InstanceId:InstanceId, Status:Status, ExecutionStartDateTime:ExecutionStartDateTime, ExecutionEndDateTime:ExecutionEndDateTime, StandardOutputContent:StandardOutputContent, StandardErrorContent:StandardErrorContent}' --output json

          
