name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/09.08-dast

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USER: ubuntu

jobs:
  build_and_scan_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Remove conflicting containerd packages
        run: |
          echo "Removing conflicting containerd packages..."
          sudo apt-get remove -y containerd containerd.io || true
          sudo apt-get purge -y containerd containerd.io || true
          echo "Conflicting containerd packages removed."
      - name: Install Docker
        run: |
          echo "Installing Docker CLI..."
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          docker --version
          echo "Docker CLI installed."
      - name: Install AWS CLI
        run: |
          echo "Installing AWS CLI..."
          sudo apt-get update
          sudo apt-get install -y unzip curl jq
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          /usr/local/bin/aws --version
          echo "AWS CLI installed."
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Authenticate Docker to ECR
        run: |
          echo "Authenticating Docker to ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
          echo "Docker authenticated to ECR."
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .
          echo "Docker image built."
      - name: Scan Docker image with Trivy
        run: |
          echo "Scanning Docker image with Trivy..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity HIGH,CRITICAL $IMAGE_NAME:latest
          echo "Docker image scanned with Trivy."
        continue-on-error: true

      - name: Push Docker image
        run: |
          echo "Pushing Docker image..."
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest
          echo "Docker image pushed."

  deploy_test:
    runs-on: ubuntu-latest
    needs: build_and_scan_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Set up SSH
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.APP_SERVER_SSH }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Create AWS credentials file
        run: |
          echo "Creating AWS credentials file..."
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${{ secrets.AWS_DEFAULT_REGION }}" >> ~/.aws/config
      - name: Transfer AWS credentials to server
        run: |
          echo "Transferring AWS credentials to server..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "mkdir -p ~/.aws"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ~/.aws/credentials ubuntu@${{ secrets.SERVER_IP }}:/home/ubuntu/.aws/credentials
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ~/.aws/config ubuntu@${{ secrets.SERVER_IP }}:/home/ubuntu/.aws/config
      - name: Deploy Docker image to Test
        run: |
          echo "Authenticating Docker to ECR on remote server..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com"
          echo "Pulling Docker image..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "docker pull $IMAGE_NAME:latest"
          echo "Stopping and removing existing Docker container..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "docker stop juice-shop || true && docker rm juice-shop || true"
          echo "Running new Docker container..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest"

  zap_baseline:
    runs-on: ubuntu-latest
    needs: deploy_test
    container:
      image: owasp/zap2docker-weekly
    env:
      ZAP_TARGET: "http://35.180.67.168:3000"
    steps:
      - name: Prepare ZAP Report Directory
        run: mkdir -p /zap/wrk
      - name: Run ZAP Baseline Scan
        run: zap-baseline.py -t $ZAP_TARGET -g gen.conf -I -x baseline.xml
      - name: Copy ZAP Baseline Report
        run: cp /zap/wrk/baseline.xml baseline.xml
      - name: Upload ZAP Baseline Report
        uses: actions/upload-artifact@v2
        with:
          name: zap-baseline-report
          path: baseline.xml

  zap_full:
    runs-on: ubuntu-latest
    needs: deploy_test
    container:
      image: owasp/zap2docker-weekly
    env:
      ZAP_TARGET: "http://35.180.67.168:3000"
    steps:
      - name: Prepare ZAP Report Directory
        run: mkdir -p /zap/wrk
      - name: Run ZAP Full Scan
        run: zap-full-scan.py -t $ZAP_TARGET -g gen.conf -I -x zap.xml
      - name: Copy ZAP Full Scan Report
        run: cp /zap/wrk/zap.xml zap.xml
      - name: Upload ZAP Full Scan Report
        uses: actions/upload-artifact@v2
        with:
          name: zap-full-scan-report
          path: zap.xml

  deploy_image:
    runs-on: ubuntu-latest
    needs: [zap_baseline, zap_full]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Set up SSH
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.APP_SERVER_SSH }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Create AWS credentials file
        run: |
          echo "Creating AWS credentials file..."
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${{ secrets.AWS_DEFAULT_REGION }}" >> ~/.aws/config
      - name: Transfer AWS credentials to server
        run: |
          echo "Transferring AWS credentials to server..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "mkdir -p ~/.aws"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ~/.aws/credentials ubuntu@${{ secrets.SERVER_IP }}:/home/ubuntu/.aws/credentials
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ~/.aws/config ubuntu@${{ secrets.SERVER_IP }}:/home/ubuntu/.aws/config
      - name: Deploy Docker image to Production
        run: |
          echo "Authenticating Docker to ECR on remote server..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com"
          echo "Pulling Docker image..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "docker pull $IMAGE_NAME:latest"
          echo "Stopping and removing existing Docker container..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "docker stop juice-shop || true && docker rm juice-shop || true"
          echo "Running new Docker container..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.SERVER_IP }} "docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest"
