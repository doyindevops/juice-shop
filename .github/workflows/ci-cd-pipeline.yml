name: CI/CD Pipeline

on:
  branches:
      - main
      - feature/06.03-ecr
      - 
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop
  SERVER_IP: 13.39.19.218
  SERVER_USER: ubuntu

jobs:
  create_cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            .yarn
            yarn.lock
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install

  yarn_test:
    runs-on: ubuntu-latest
    needs: create_cache
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            .yarn
            yarn.lock
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  gitleaks:
    runs-on: ubuntu-latest
    needs: yarn_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run gitleaks
        uses: zricethezav/gitleaks-action@v1.2.0
        with:
          args: "detect --verbose --source . -f json -r gitleaks.json"
        continue-on-error: true

      - name: Upload gitleaks report
        uses: actions/upload-artifact@v2
        with:
          name: gitleaks-report
          path: gitleaks.json

  njsscan:
    runs-on: ubuntu-latest
    needs: yarn_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install njsscan
        run: pip3 install --upgrade njsscan

      - name: Run njsscan
        run: njsscan --exit-warning . --sarif -o njsscan.sarif
        continue-on-error: true

      - name: Upload njsscan report
        uses: actions/upload-artifact@v2
        with:
          name: njsscan-report
          path: njsscan.sarif

  semgrep:
    runs-on: ubuntu-latest
    needs: yarn_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          args: "ci --json --output semgrep.json"
        continue-on-error: true

      - name: Upload semgrep report
        uses: actions/upload-artifact@v2
        with:
          name: semgrep-report
          path: semgrep.json

  retire:
    runs-on: ubuntu-latest
    needs: yarn_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            .yarn
            yarn.lock
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install retire
        run: npm install -g retire

      - name: Run retire
        run: retire --path . --outputformat json --outputpath retire.json
        continue-on-error: true

      - name: Upload retire report
        uses: actions/upload-artifact@v2
        with:
          name: retire-report
          path: retire.json

  build_image:
    runs-on: ubuntu-latest
    needs: yarn_test
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build and push Docker image
        env:
          IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop
        run: |
          docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest
