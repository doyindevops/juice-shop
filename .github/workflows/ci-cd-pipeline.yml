name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/06.03-ecr

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USER: ubuntu

jobs:
  yarn_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            .yarn
            yarn.lock
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

  gitleaks:
    runs-on: ubuntu-latest
    needs: yarn_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run gitleaks
        uses: zricethezav/gitleaks-action@v1.2.0
        with:
          args: "detect --verbose --source . -f json -r gitleaks.json"
        continue-on-error: true

      - name: Upload gitleaks report
        uses: actions/upload-artifact@v2
        with:
          name: gitleaks.json
          path: gitleaks.json

  njsscan:
    runs-on: ubuntu-latest
    needs: yarn_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install njsscan
        run: pip3 install --upgrade njsscan

      - name: Run njsscan
        run: njsscan --exit-warning . --sarif -o njsscan.sarif
        continue-on-error: true

      - name: Upload njsscan report
        uses: actions/upload-artifact@v2
        with:
          name: njsscan.sarif
          path: njsscan.sarif

  semgrep:
    runs-on: ubuntu-latest
    needs: yarn_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          args: "ci --json --output semgrep.json"
        continue-on-error: true

      - name: Upload semgrep report
        uses: actions/upload-artifact@v2
        with:
          name: semgrep.json
          path: semgrep.json

  retire:
    runs-on: ubuntu-latest
    needs: yarn_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            .yarn
            yarn.lock
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install retire
        run: npm install -g retire

      - name: Run retire
        run: retire --path . --outputformat json --outputpath retire.json
        continue-on-error: true

      - name: Upload retire report
        uses: actions/upload-artifact@v2
        with:
          name: retire.json
          path: retire.json

  build_and_scan_image:
    runs-on: ubuntu-latest
    needs: [yarn_test, gitleaks, njsscan, semgrep, retire]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Remove conflicting containerd packages
        run: |
          echo "Removing conflicting containerd packages..."
          sudo apt-get remove -y containerd containerd.io || true
          sudo apt-get purge -y containerd containerd.io || true
          echo "Conflicting containerd packages removed."

      - name: Install Docker
        run: |
          echo "Installing Docker CLI..."
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          docker --version
          echo "Docker CLI installed."

      - name: Install AWS CLI
        run: |
          echo "Installing AWS CLI..."
          sudo apt-get update
          sudo apt-get install -y unzip curl jq
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
          /usr/local/bin/aws --version
          echo "AWS CLI installed."

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Authenticate Docker to ECR
        run: |
          echo "Authenticating Docker to ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
          echo "Docker authenticated to ECR."

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .
          echo "Docker image built."

      - name: Scan Docker image with Trivy
        id: trivy-scan
        run: |
          echo "Scanning Docker image with Trivy..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image -f json -o trivy.json --severity HIGH,CRITICAL $IMAGE_NAME:${{ github.sha }} || true
          echo "Trivy scan completed"
          echo "::set-output name=trivy_exit_code::$?"

      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: trivy.json
          path: trivy.json

      - name: Push Docker image
        run: |
          echo "Pushing Docker image..."
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest
          echo "Docker image pushed."

  upload_reports:
    runs-on: ubuntu-latest
    needs: build_and_scan_image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download gitleaks report
        uses: actions/download-artifact@v2
        with:
          name: gitleaks.json
          path: .

      - name: Download njsscan report
        uses: actions/download-artifact@v2
        with:
          name: njsscan.sarif
          path: .

      - name: Download semgrep report
        uses: actions/download-artifact@v2
        with:
          name: semgrep.json
          path: .

      - name: Download retire report
        uses: actions/download-artifact@v2
        with:
          name: retire.json
          path: .

      - name: Download trivy report
        uses: actions/download-artifact@v2
        with:
          name: trivy.json
          path: .

      - name: Install Python
        run: sudo apt-get update && sudo apt-get install -y python3 python3-pip

      - name: Install Python dependencies
        run: pip3 install requests

      - name: Upload reports to DefectDojo
        run: |
          python3 upload-reports.py gitleaks.json
          python3 upload-reports.py njsscan.sarif
          python3 upload-reports.py semgrep.json
          python3 upload-reports.py retire.json
          python3 upload-reports.py trivy.json

  deploy_image:
    runs-on: ubuntu-latest
    needs: [build_and_scan_image, upload_reports]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Set up SSH
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Create AWS credentials file
        run: |
          echo "Creating AWS credentials file..."
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${{ secrets.AWS_DEFAULT_REGION }}" >> ~/.aws/config

      - name: Transfer AWS credentials to server
        run: |
          echo "Transferring AWS credentials to server..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "mkdir -p ~/.aws"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ~/.aws/credentials ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/home/${{ env.SERVER_USER }}/.aws/credentials
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ~/.aws/config ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/home/${{ env.SERVER_USER }}/.aws/config

      - name: Deploy Docker image
        run: |
          echo "Authenticating Docker to ECR on remote server..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com"
          echo "Pulling Docker image..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker pull $IMAGE_NAME:latest"
          echo "Stopping and removing existing Docker container..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker stop juice-shop || true && docker rm juice-shop || true"
          echo "Running new Docker container..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest"

  report_trivy_exit_code:
    runs-on: ubuntu-latest
    needs: deploy_image
    steps:
      - name: Check Trivy exit code
        run: |
          TRIVY_EXIT_CODE=${{ needs.build_and_scan_image.outputs.trivy_exit_code }}
          echo "Trivy scan exit code: $TRIVY_EXIT_CODE"
          exit $TRIVY_EXIT_CODE
