name: CI/CD Pipeline with Trivy

on:
  push:
    branches:
      - main
      - feature/*

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop

jobs:
  test_and_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            .yarn
            yarn.lock
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

      - name: Run gitleaks
        uses: zricethezav/gitleaks-action@v1.2.0
        with:
          args: "detect --verbose --source . -f json -r gitleaks.json"
        continue-on-error: true

      - name: Run njsscan
        run: |
          pip3 install --upgrade njsscan
          njsscan --exit-warning . --sarif -o njsscan.sarif
        continue-on-error: true

      - name: Run semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          args: "ci --json --output semgrep.json"
        continue-on-error: true

      - name: Run retire
        run: |
          npm install -g retire
          retire --path . --outputformat json --outputpath retire.json
        continue-on-error: true

      - name: List generated files
        run: ls -al

      - name: Upload reports
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: |
            gitleaks.json
            njsscan.sarif
            semgrep.json
            retire.json

  build_and_scan_image:
    runs-on: ubuntu-latest
    needs: test_and_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ env.IMAGE_NAME }}

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} -t ${{ env.IMAGE_NAME }}:latest .

      - name: List files before scan
        run: ls -al

      - name: Scan Docker image with Trivy
        id: trivy-scan
        run: |
          set -o pipefail
          echo "Running Trivy scan..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image -f json -o trivy.json --severity HIGH,CRITICAL ${{ env.IMAGE_NAME }}:${{ github.sha }} 2>&1 | tee trivy.log
          echo "Contents of trivy.log:"
          cat trivy.log
          echo "Contents of trivy.json (if created):"
          cat trivy.json || echo "trivy.json not found"
          echo "Listing current directory after scan:"
          ls -al

      - name: Verify trivy.json existence
        run: if [ -f trivy.json ]; then echo "trivy.json exists"; else echo "trivy.json does not exist"; fi

      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: trivy-report
          path: trivy.json

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:latest

  upload_reports:
    runs-on: ubuntu-latest
    needs: [test_and_scan, build_and_scan_image]
    steps:
      - name: Download all reports
        uses: actions/download-artifact@v2
        with:
          name: reports
          path: .

      - name: Download Trivy report
        uses: actions/download-artifact@v2
        with:
          name: trivy-report
          path: .

      - name: List downloaded files
        run: ls -al

      - name: Install Python
        run: sudo apt-get update && sudo apt-get install -y python3 python3-pip

      - name: Install Python dependencies
        run: pip3 install requests

      - name: Upload reports to DefectDojo
        run: |
          python3 upload-reports.py gitleaks.json
          python3 upload-reports.py njsscan.sarif
          python3 upload-reports.py semgrep.json
          python3 upload-reports.py retire.json
          python3 upload-reports.py trivy.json

  deploy_image:
    runs-on: ubuntu-latest
    needs: upload_reports
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Create AWS credentials file
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "[default]" > ~/.aws/config
          echo "region=${{ secrets.AWS_DEFAULT_REGION }}" >> ~/.aws/config

      - name: Transfer AWS credentials to server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "mkdir -p ~/.aws"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ~/.aws/credentials ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/home/${{ env.SERVER_USER }}/.aws/credentials
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ~/.aws/config ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/home/${{ env.SERVER_USER }}/.aws/config

      - name: Deploy Docker image
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker pull ${{ env.IMAGE_NAME }}:latest"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker stop juice-shop || true && docker rm juice-shop || true"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker run -d --name juice-shop -p 3000:3000 ${{ env.IMAGE_NAME }}:latest"
