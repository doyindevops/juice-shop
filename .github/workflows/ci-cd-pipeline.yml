name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature/09.04-ssm

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/juice-shop
  SERVER_IP: ${{ secrets.SERVER_IP }}
  SERVER_USER: ubuntu

jobs:
  test_and_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: |
            node_modules
            .yarn
            yarn.lock
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: yarn install

      - name: Create placeholder JSON files
        run: |
          echo '{}' > gitleaks.json
          echo '{}' > njsscan.sarif
          echo '{}' > semgrep.json
          echo '{}' > retire.json
          echo '{}' > snyk_report.json
      - name: Run tests
        run: yarn test

      - name: Run gitleaks
        uses: zricethezav/gitleaks-action@v1.2.0
        with:
          args: "detect --verbose --source . -f json -r gitleaks.json"
        continue-on-error: true

      - name: Run njsscan
        run: |
          pip3 install --upgrade njsscan
          njsscan --exit-warning . --sarif -o njsscan.sarif
        continue-on-error: true

      - name: Run semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          args: "ci --json --output semgrep.json"
        continue-on-error: true

      - name: Run retire
        run: |
          npm install -g retire
          retire --path . --outputformat json --outputpath retire.json
        continue-on-error: true

      - name: List generated files
        run: ls -al

      - name: Upload reports
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: |
            gitleaks.json
            njsscan.sarif
            semgrep.json
            retire.json

  build_and_scan_image:
    runs-on: ubuntu-latest
    needs: test_and_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Remove conflicting containerd packages
        run: |
          sudo apt-get remove -y containerd containerd.io || true
          sudo apt-get purge -y containerd containerd.io || true
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl jq
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Authenticate Docker to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:${{ github.sha }} -t $IMAGE_NAME:latest .

      - name: Manually create Snyk report
        run: echo '{}' > snyk_report.json

      - name: Test Docker image with Snyk
        uses: snyk/actions/docker@master
        with:
          image: $IMAGE_NAME:${{ github.sha }}
          args: --file=Dockerfile --json-file-output=snyk_report.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Verify and Upload Snyk report
        if: always()
        run: |
          if [ -f snyk_report.json ]; then
            echo "Snyk report found, uploading..."
          else
            echo "Snyk report not found, skipping upload."
          fi
      - name: Upload Snyk report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: snyk-report
          path: snyk_report.json

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest
      - name: Clean up Docker
        run: |
          docker system prune -af --volumes
          sudo apt-get clean

  upload_reports:
    runs-on: ubuntu-latest
    needs: [test_and_scan, build_and_scan_image]
    steps:
      - name: Checkout code again
        uses: actions/checkout@v2

      - name: Download all reports
        uses: actions/download-artifact@v2
        with:
          name: reports
          path: .

      - name: Download Snyk report
        uses: actions/download-artifact@v2
        with:
          name: snyk-report
          path: .

      - name: Install Python
        run: sudo apt-get update && sudo apt-get install -y python3 python3-pip

      - name: Install Python dependencies
        run: pip3 install requests

  deploy_image:
    runs-on: ubuntu-latest
    needs: upload_reports
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Verify home directory
        run: ls -al ~/

      - name: Create SSH directory
        run: mkdir -p ~/.ssh

      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Add server to known hosts
        run: ssh-keyscan ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Verify SSH setup
        run: ls -al ~/.ssh

      - name: Create AWS credentials file
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/..aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/..aws/credentials
          echo "[default]" > ~/..aws/config
          echo "region=${{ secrets.AWS_DEFAULT_REGION }}" >> ~/..aws/config
      - name: Transfer AWS credentials to server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "mkdir -p ~/.aws"
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ~/.aws/credentials ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/home/${{ env.SERVER_USER }}/.aws/credentials
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking-no ~/..aws/config ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:/home/${{ env.SERVER_USER }}/.aws/config
      - name: Deploy Docker image
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking-no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking-no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker pull $IMAGE_NAME:latest"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking-no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker stop juice-shop || true && docker rm juice-shop || true"
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking-no ${{ env.SERVER_USER }}@${{ env.SERVER_IP }} "docker run -d --name juice-shop -p 3000:3000 $IMAGE_NAME:latest"

  report_snyk_exit_code:
    runs-on: ubuntu-latest
    needs: deploy_image
    steps:
      - name: Check Snyk exit code
        run: |
          SNYK_EXIT_CODE=${{ needs.build_and_scan_image.outputs.snyk_exit_code }}
          echo "Snyk scan exit code: $SNYK_EXIT_CODE"
          exit $SNYK_EXIT_CODE
